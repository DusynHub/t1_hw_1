{
	"info": {
		"_postman_id": "6bb8ab61-9b12-44f5-a413-d3e065728d88",
		"name": "t1_hw1_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25271283"
	},
	"item": [
		{
			"name": "Validation test",
			"item": [
				{
					"name": "add category  with blank name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Name can\\'t be blank')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "add category  with null name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Name can\\'t be blank')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "add category  with name length > 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Name length is bigger than 50')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Whispers of moonlight dance upon dew-kissed petals!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get category with id -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('must be greater than 0')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/-10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"-10"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get category with id 10.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Failed to convert value of type \\'java.lang.String\\' to required type \\'long\\'; For input string: \\\"10.1\\\"')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/10.1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"10.1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all categories page -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('getAllCategories.page: must be greater than or equal to 0')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories?page=-1&size",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "page",
									"value": "-1"
								},
								{
									"key": "size",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all categories size -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('getAllCategories.size: must be greater than or equal to 0')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories?page=&size=-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "size",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update category -20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('must be greater than 0')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"shooter2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/-20",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"-20"
							]
						}
					},
					"response": []
				},
				{
					"name": "update category with name length >50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Name length is bigger than 50')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Whispers of moonlight dance upon dew-kissed petals!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete category -1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('must be greater than 0')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/categories/-1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"-1"
							]
						}
					},
					"response": []
				},
				{
					"name": "add product 1 with blank name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Name can\\'t be blank')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"\",\n    \"description\": \"product_1_witcher_3_the_game_of_the_year_from_Poland\",\n    \"price\": 100.12,\n    \"category\": {\"id\": 1, \"name\": \"RPG1\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "add product 1 with null price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('must not be null')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Wither 3\",\n    \"description\": \"product_1_witcher_3_the_game_of_the_year_from_Poland\",\n    \"price\": null,\n    \"category\": {\"id\": 1, \"name\": \"RPG1\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "add product 1 with  price -100.12",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Price must be positive number]')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Witcher 3\",\n    \"description\": \"product_1_witcher_3_the_game_of_the_year_from_Poland\",\n    \"price\": -100.12,\n    \"category\": {\"id\": 1, \"name\": \"RPG1\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "add product 1 with blank name >255",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Max product name size is 255 symbols')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. \",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.\",\n    \"price\": 100.12,\n    \"category\": {\"id\": 1, \"name\": \"RPG1\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "add product 1 with blank description > 1000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Max product description size is 1000 symbols')",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Witcher_3\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing sem neque sed ipsum!!!!\",\n    \"price\": 100.12,\n    \"category\": {\"id\": 1, \"name\": \"RPG1\"}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "add product 1 with null category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('must not be null')",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Witcher_3\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient!\",\n    \"price\": 100.12,\n    \"category\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products all [without filters] page -10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('filterAll.page: must be greater than or equal to 0')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/filtered?page=-10&size=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"filtered"
							],
							"query": [
								{
									"key": "page",
									"value": "-10"
								},
								{
									"key": "size",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products all [without filters] size -10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('filterAll.size: must be greater than or equal to 0')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/filtered?page=0&size=-2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"filtered"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "-2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products all [without filters] size 10.1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									"",
									"pm.test(\"Has response body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Test error response 'message' field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).contains('Failed to convert value of type \\'java.lang.String\\' to required type \\'int\\'; For input string: ')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/filtered?page=0&size=10.1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"filtered"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10.1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "add category  RPG1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"RPG1\"').to.eql('RPG1');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"RPG1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get category 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"RPG1\"').to.eql('RPG1');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "add category shooter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"shooter\"').to.eql('shooter');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"shooter\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "update category 2 with name \"shooter2\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"shooter2\"').to.eql('shooter2');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"shooter2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "add category cooperative3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"cooperative3\"').to.eql('cooperative3');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"cooperative3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "update category 3 without body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories/3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "add category  ARPG4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"ARPG1\"').to.eql('ARPG1');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"ARPG1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "add category  simulator5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Test category 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 5').to.eql(5);",
							"});",
							"pm.test(\"Test category 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"simulator5\"').to.eql('simulator5');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"simulator5\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete category  simulator5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories/5",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"category.id\" field must be 1').to.eql(1);    ",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"category.name\" field must be \"RPG1\"').to.eql(\"RPG1\");    ",
							"});",
							"",
							"",
							"pm.test(\"Test product[1] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('id');",
							"    pm.expect(jsonData[1].id, '\"category.id\" field must be 2').to.eql(2);    ",
							"    pm.expect(jsonData[1]).to.have.property('name');",
							"    pm.expect(jsonData[1].name, '\"category.name\" field must be \"shooter2\"').to.eql(\"shooter2\");    ",
							"});",
							"",
							"pm.test(\"Test product[2] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[2]).to.have.property('id');",
							"    pm.expect(jsonData[2].id, '\"category.id\" field must be 3').to.eql(3);    ",
							"    pm.expect(jsonData[2]).to.have.property('name');",
							"    pm.expect(jsonData[2].name, '\"category.name\" field must be \"cooperative3\"').to.eql(\"cooperative3\");    ",
							"});",
							"",
							"pm.test(\"Test product[3] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[3]).to.have.property('id');",
							"    pm.expect(jsonData[3].id, '\"category.id\" field must be 4').to.eql(4);    ",
							"    pm.expect(jsonData[3]).to.have.property('name');",
							"    pm.expect(jsonData[3].name, '\"category.name\" field must be \"ARPG1\"').to.eql(\"ARPG1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "add product 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Witcher_3\"').to.eql('Witcher_3');",
							"});",
							"",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_1_witcher_3_the_game_of_the_year_from_Poland\"').to.eql('product_1_witcher_3_the_game_of_the_year_from_Poland');",
							"});",
							"",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" must be 100.12').to.eql(100.12);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 1').to.eql(1);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"RPG1\"').to.eql(\"RPG1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Witcher_3\",\n    \"description\": \"product_1_witcher_3_the_game_of_the_year_from_Poland\",\n    \"price\": 100.12,\n    \"category\": {\"id\": 1, \"name\": \"RPG1\"}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "add product 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Witcher_2\"').to.eql('Witcher_2');",
							"});",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_2_witcher_2_game_from_Poland\"').to.eql('product_2_witcher_2_game_from_Poland');",
							"});",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" field must be 50.55').to.eql(50.55);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 1').to.eql(1);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"RPG1\"').to.eql(\"RPG1\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Witcher_2\",\n    \"description\": \"product_2_witcher_2_game_from_Poland\",\n    \"price\": 50.55,\n    \"category\": {\"id\": 1, \"name\": \"RPG1\"}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "add product 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"half_life_2\"').to.eql('half_life_2');",
							"});",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_3_half_life_2_from_valve_studios\"').to.eql('product_3_half_life_2_from_valve_studios');",
							"});",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" field must be 5000.15').to.eql(5000.15);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 2').to.eql(2);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"shooter2\"').to.eql(\"shooter2\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"half_life_2\",\n    \"description\": \"product_3_half_life_2_from_valve_studios\",\n    \"price\": 5000.15,\n    \"category\": {\"id\": 2, \"name\": \"shooter2\"}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "add product 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Helldivers_2\"').to.eql('Helldivers_2');",
							"});",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_4_Helldivers_2\"').to.eql('product_4_Helldivers_2');",
							"});",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" field must be 2000.15').to.eql(2000.15);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 3').to.eql(3);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"cooperative3\"').to.eql(\"cooperative3\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Helldivers_2\",\n    \"description\": \"product_4_Helldivers_2\",\n    \"price\": 2000.15,\n    \"category\": {\"id\": 3, \"name\": \"cooperative3\"}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete category RPG1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([409]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/categories/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"categories",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get poducts by name like \"Witcher\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"Witcher_3\"').to.eql('Witcher_3');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_1_witcher_3_the_game_of_the_year_from_Poland\"').to.eql('product_1_witcher_3_the_game_of_the_year_from_Poland');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 100.12').to.eql(100.12);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 1').to.eql(1);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"RPG1\"').to.eql(\"RPG1\");    ",
							"});",
							"",
							"pm.test(\"Test product[1] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('id');",
							"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test product[1] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('name');",
							"    pm.expect(jsonData[1].name, '\"name\" must be \"Witcher_2\"').to.eql('Witcher_2');",
							"});",
							"pm.test(\"Test product[1] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('description');",
							"    pm.expect(jsonData[1].description, '\"description\" must be \"product_2_witcher_2_game_from_Poland\"').to.eql('product_2_witcher_2_game_from_Poland');",
							"});",
							"pm.test(\"Test product[1] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('price');",
							"    pm.expect(jsonData[1].price, '\"price\" field must be 50.55').to.eql(50.55);",
							"});",
							"",
							"pm.test(\"Test product[1] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('category');",
							"    pm.expect(jsonData[1].category).to.have.property('id');",
							"    pm.expect(jsonData[1].category.id, '\"category.id\" field must be 1').to.eql(1);    ",
							"    pm.expect(jsonData[1].category).to.have.property('name');",
							"    pm.expect(jsonData[1].category.name, '\"category.name\" field must be \"RPG1\"').to.eql(\"RPG1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products?name=Witcher&categories=&description=",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "name",
							"value": "Witcher"
						},
						{
							"key": "categories",
							"value": ""
						},
						{
							"key": "description",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "update product 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Witcher_3\"').to.eql('Witcher_3');",
							"});",
							"",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_1_witcher_3_the_game_of_the_year_from_Poland\"').to.eql('product_1_witcher_3_the_game_of_the_year_from_Poland');",
							"});",
							"",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" must be 200.1').to.eql(200.1);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 4').to.eql(4);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"ARPG1\"').to.eql(\"ARPG1\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 200.1,\n    \"category\": {\"id\": 4}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get poduct 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Witcher_3\"').to.eql('Witcher_3');",
							"});",
							"",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_1_witcher_3_the_game_of_the_year_from_Poland\"').to.eql('product_1_witcher_3_the_game_of_the_year_from_Poland');",
							"});",
							"",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" must be 200.1').to.eql(200.1);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 4').to.eql(4);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"ARPG1\"').to.eql(\"ARPG1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update product without category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Witcher_3\"').to.eql('Witcher_3');",
							"});",
							"",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_1_witcher_3_the_game_of_the_year_from_Poland\"').to.eql('product_1_witcher_3_the_game_of_the_year_from_Poland');",
							"});",
							"",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" must be 100.05').to.eql(100.05);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 4').to.eql(4);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"ARPG1\"').to.eql(\"ARPG1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 100.05\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update product 1 without body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test error response 'message' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).contains('Required request body is missing')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get poduct 1 price update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Has response body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test product 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test product 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData.name, '\"name\" must be \"Witcher_3\"').to.eql('Witcher_3');",
							"});",
							"",
							"pm.test(\"Test product 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData.description, '\"description\" must be \"product_1_witcher_3_the_game_of_the_year_from_Poland\"').to.eql('product_1_witcher_3_the_game_of_the_year_from_Poland');",
							"});",
							"",
							"pm.test(\"Test product 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('price');",
							"    pm.expect(jsonData.price, '\"price\" must be 100.05').to.eql(100.05);",
							"});",
							"",
							"pm.test(\"Test product 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('category');",
							"    pm.expect(jsonData.category).to.have.property('id');",
							"    pm.expect(jsonData.category.id, '\"category.id\" field must be 4').to.eql(4);    ",
							"    pm.expect(jsonData.category).to.have.property('name');",
							"    pm.expect(jsonData.category.name, '\"category.name\" field must be \"ARPG1\"').to.eql(\"ARPG1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get poducts by name like \"Witcher\" after update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"Witcher_3\"').to.eql('Witcher_3');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_1_witcher_3_the_game_of_the_year_from_Poland\"').to.eql('product_1_witcher_3_the_game_of_the_year_from_Poland');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 100.05').to.eql(100.05);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 4').to.eql(4);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"ARPG1\"').to.eql(\"ARPG1\");    ",
							"});",
							"",
							"pm.test(\"Test product[1] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('id');",
							"    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test product[1] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('name');",
							"    pm.expect(jsonData[1].name, '\"name\" must be \"Witcher_2\"').to.eql('Witcher_2');",
							"});",
							"pm.test(\"Test product[1] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('description');",
							"    pm.expect(jsonData[1].description, '\"description\" must be \"product_2_witcher_2_game_from_Poland\"').to.eql('product_2_witcher_2_game_from_Poland');",
							"});",
							"pm.test(\"Test product[1] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('price');",
							"    pm.expect(jsonData[1].price, '\"price\" field must be 50.55').to.eql(50.55);",
							"});",
							"",
							"pm.test(\"Test product[1] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('category');",
							"    pm.expect(jsonData[1].category).to.have.property('id');",
							"    pm.expect(jsonData[1].category.id, '\"category.id\" field must be 1').to.eql(1);    ",
							"    pm.expect(jsonData[1].category).to.have.property('name');",
							"    pm.expect(jsonData[1].category.name, '\"category.name\" field must be \"RPG1\"').to.eql(\"RPG1\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products?name=Witcher&categories=&description=",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "name",
							"value": "Witcher"
						},
						{
							"key": "categories",
							"value": ""
						},
						{
							"key": "description",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get poducts by name like \"2\" and description like \"studious\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"half_life_2\"').to.eql('half_life_2');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_3_half_life_2_from_valve_studios\"').to.eql('product_3_half_life_2_from_valve_studios');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 5000.15').to.eql(5000.15);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 2').to.eql(2);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"shooter2\"').to.eql(\"shooter2\");    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products?name=2&categories=&description=studios",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "name",
							"value": "2"
						},
						{
							"key": "categories",
							"value": ""
						},
						{
							"key": "description",
							"value": "studios"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products filtered by greater than 2000",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"half_life_2\"').to.eql('half_life_2');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_3_half_life_2_from_valve_studios\"').to.eql('product_3_half_life_2_from_valve_studios');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 5000.15').to.eql(5000.15);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 2').to.eql(2);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"shooter2\"').to.eql(\"shooter2\");    ",
							"});",
							"",
							"pm.test(\"Test product[1] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('id');",
							"    pm.expect(jsonData[1].id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test product[1] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('name');",
							"    pm.expect(jsonData[1].name, '\"name\" must be \"Helldivers_2\"').to.eql('Helldivers_2');",
							"});",
							"pm.test(\"Test product[1] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('description');",
							"    pm.expect(jsonData[1].description, '\"description\" must be \"product_4_Helldivers_2\"').to.eql('product_4_Helldivers_2');",
							"});",
							"pm.test(\"Test product[1] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('price');",
							"    pm.expect(jsonData[1].price, '\"price\" field must be 2000.15').to.eql(2000.15);",
							"});",
							"",
							"pm.test(\"Test product[1] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('category');",
							"    pm.expect(jsonData[1].category).to.have.property('id');",
							"    pm.expect(jsonData[1].category.id, '\"category.id\" field must be 3').to.eql(3);    ",
							"    pm.expect(jsonData[1].category).to.have.property('name');",
							"    pm.expect(jsonData[1].category.name, '\"category.name\" field must be \"cooperative3\"').to.eql(\"cooperative3\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \"field\": \"price\",\n    \"operator\": \"GREATER_THAN\",\n    \"value\": 2000\n    }   \n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/filtered",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products filtered by greater than 2000 and category name \"cooperative3\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
							"});",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"Helldivers_2\"').to.eql('Helldivers_2');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_4_Helldivers_2\"').to.eql('product_4_Helldivers_2');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 2000.15').to.eql(2000.15);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 3').to.eql(3);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"cooperative3\"').to.eql(\"cooperative3\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \"field\": \"price\",\n    \"operator\": \"GREATER_THAN\",\n    \"value\": 2000\n    },\n    {\n    \"field\": \"category.name\",\n    \"operator\": \"EQUALS\",\n    \"value\": \"cooperative3\"\n    }  \n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/filtered",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products filtered equals category name = \"cooperative3\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"Helldivers_2\"').to.eql('Helldivers_2');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_4_Helldivers_2\"').to.eql('product_4_Helldivers_2');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 2000.15').to.eql(2000.15);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 3').to.eql(3);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"cooperative3\"').to.eql(\"cooperative3\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \"field\": \"category.name\",\n    \"operator\": \"EQUALS\",\n    \"value\": \"cooperative3\"\n    }  \n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/filtered",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products filtered equals category name like  \"game\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);",
							"});",
							"",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"Helldivers_2\"').to.eql('Helldivers_2');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_4_Helldivers_2\"').to.eql('product_4_Helldivers_2');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 2000.15').to.eql(2000.15);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 3').to.eql(3);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"cooperative3\"').to.eql(\"cooperative3\");    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n    \"field\": \"category.name\",\n    \"operator\": \"LIKE\",\n    \"value\": \"coop\"\n    }  \n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/filtered",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products all [without filters] page 1 and size 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);",
							"});",
							"pm.test(\"Test product[0] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);",
							"});",
							"pm.test(\"Test product[0] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name, '\"name\" must be \"half_life_2\"').to.eql('half_life_2');",
							"});",
							"pm.test(\"Test product[0] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('description');",
							"    pm.expect(jsonData[0].description, '\"description\" must be \"product_3_half_life_2_from_valve_studios\"').to.eql('product_3_half_life_2_from_valve_studios');",
							"});",
							"pm.test(\"Test product[0] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('price');",
							"    pm.expect(jsonData[0].price, '\"price\" field must be 5000.15').to.eql(5000.15);",
							"});",
							"",
							"pm.test(\"Test product[0] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('category');",
							"    pm.expect(jsonData[0].category).to.have.property('id');",
							"    pm.expect(jsonData[0].category.id, '\"category.id\" field must be 2').to.eql(2);    ",
							"    pm.expect(jsonData[0].category).to.have.property('name');",
							"    pm.expect(jsonData[0].category.name, '\"category.name\" field must be \"shooter2\"').to.eql(\"shooter2\");    ",
							"});",
							"",
							"pm.test(\"Test product[1] 'id' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('id');",
							"    pm.expect(jsonData[1].id, '\"id\" must be 4').to.eql(4);",
							"});",
							"pm.test(\"Test product[1] 'name' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('name');",
							"    pm.expect(jsonData[1].name, '\"name\" must be \"Helldivers_2\"').to.eql('Helldivers_2');",
							"});",
							"pm.test(\"Test product[1] 'description' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('description');",
							"    pm.expect(jsonData[1].description, '\"description\" must be \"product_4_Helldivers_2\"').to.eql('product_4_Helldivers_2');",
							"});",
							"pm.test(\"Test product[1] 'price' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('price');",
							"    pm.expect(jsonData[1].price, '\"price\" field must be 2000.15').to.eql(2000.15);",
							"});",
							"",
							"pm.test(\"Test product[1] 'category' field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[1]).to.have.property('category');",
							"    pm.expect(jsonData[1].category).to.have.property('id');",
							"    pm.expect(jsonData[1].category.id, '\"category.id\" field must be 3').to.eql(3);    ",
							"    pm.expect(jsonData[1].category).to.have.property('name');",
							"    pm.expect(jsonData[1].category.name, '\"category.name\" field must be \"cooperative3\"').to.eql(\"cooperative3\");    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/filtered?page=1&size=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"filtered"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get products all [without filters] page 10 and size 2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"pm.test(\"Test list products response\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/filtered?page=10&size=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"filtered"
					],
					"query": [
						{
							"key": "page",
							"value": "10"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete product  1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete product  1 after deleting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete product  10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 204\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([204]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/10",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"10"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/consumer",
			"type": "string"
		}
	]
}